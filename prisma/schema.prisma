// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  cpf String? @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  hash          String?
  accounts      Account[]
  sessions      Session[]

  created_establishments Establishment[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Establishment {
  id String @id @default(cuid())
  name String 
  phone String @unique
  email String @unique
  cep String 
  lat Float @default(0.0)
  lng Float @default(0.0)
  ratio Int @default(20)
  active Boolean @default(true)

  workers Workers[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  author_id String
  author User @relation(fields: [author_id], references: [id])

  @@map("establishments")
}


model Workers {
  id String @id @default(cuid())
  name String
  login String @unique
  cpf String
  phone String
  email String
  is_manager Boolean @default(false)
  is_admin Boolean @default(false)
  hash String
  is_active Boolean @default(true)

  created_at DateTime @default(now())

  establishment_id String
  establishment Establishment @relation(fields: [establishment_id], references: [id])

  worker_clockin Clockin[]
  work_day_summarys WorkDaySummary[]

  worker_schedule WorkerSchedule[]
  @@map("workers")
}

enum WeekDay {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}
model WorkerSchedule {
  id String @id @default(cuid())
  week_day WeekDay
  start_hour Int
  start_minute Int
  end_hour Int
  end_minute Int
  rest_time_in_minutes Int
  is_day_off Boolean @default(false)

  worker_id String
  worker Workers @relation(fields: [worker_id], references: [id])


  @@map("worker_schedule")
}

model Clockin{
  id String @id @default(cuid())
  clocked_at DateTime @default(now())
  is_entry Boolean @default(false)
  lat Float
  lng Float

  worker_id String
  worker Workers @relation(fields: [worker_id], references: [id])

  registered_by String
  is_auto_generated Boolean @default(false)

  @@map("clockin")
}

model WorkDaySummary{
  id String @id @default(cuid())
  work_date DateTime @db.Date
  expected_minutes Int @default(0)
  worked_minutes Int @default(0)
  rested_minutes Int @default(0)
  time_balance Int @default(0)
  is_medical_leave Boolean @default(false)
  status String @default("present")

  worker_id String
  worker Workers @relation(fields: [worker_id], references: [id])

  @@unique([worker_id, work_date])

  @@map("work_day_summary")
}